import React, { useState, useEffect, useCallback, lazy, Suspense } from 'react';
import { HelmetProvider } from 'react-helmet-async';
import Link from 'next/link';
import './App.css';
import { UnifiedVenue, ALL_UNIFIED_VENUES, convertToLegacyStadium } from './data/unifiedVenues';
import { UnifiedGameSelector } from './components/UnifiedGameSelector';
import { EmptyState } from './components/EmptyStates';
import { ErrorProvider, useError } from './components/ErrorNotification';
import { Breadcrumb } from './components/Breadcrumb';
import { ShareButton } from './components/ShareButton';
import { Navigation } from './components/Navigation';
import { LoadingSpinner } from './components/LoadingSpinner';
import { VenueChangeSkeleton } from './components/SkeletonScreens';
import { ErrorBoundary } from './components/ErrorBoundary';
import { SEOHelmet } from './components/SEOHelmet';
import { I18nProvider, useTranslation } from './i18n/i18nContext';
import { MLBGame, mlbApi } from './services/mlbApi';
import { NFLGame } from './services/nflApi';
import { MiLBGame } from './services/milbApi';
import { WeatherForecast, weatherApi } from './services/weatherApi';
import { formatDateTimeWithTimezone } from './utils/timeUtils';
import { OfflineIndicator } from './components/OfflineIndicator';
import * as serviceWorkerRegistration from './utils/serviceWorkerRegistration';
import { trackStadiumSelection, trackGameSelection, trackFilterUsage } from './utils/analytics';
import { getUnifiedVenueShade, ShadedVenueSection, VenueSection } from './utils/getUnifiedVenueShade';
import { SunFilterCriteria } from './components/SunExposureFilterFixed';
import { SeatingSectionSun, getSunPosition } from './utils/sunCalculations';
import { getStadiumSections } from './data/stadiumSections';
import { getVenueSections } from './data/venueSections';

// Lazy load heavy components
const WeatherDisplay = lazy(() => 
  import('./components/WeatherDisplay').then(m => ({ default: m.WeatherDisplay }))
);
const SunExposureFilterFixed = lazy(() => 
  import('./components/SunExposureFilterFixed').then(m => ({ default: m.SunExposureFilterFixed }))
);
const SectionList = lazy(() => 
  import('./components/SectionList').then(m => ({ default: m.SectionList }))
);
const SunExposureExplanation = lazy(() => 
  import('./components/SunExposureExplanation').then(m => ({ default: m.SunExposureExplanation }))
);
const MobileApp = lazy(() => import('./MobileApp'));

// Icons - keep these lightweight and imported directly
import { SunIcon, CloudIcon, ChartIcon, InfoIcon, MoonIcon, StadiumIcon, ShadeIcon, PartlyCloudyIcon, RainIcon } from './components/Icons';

// Component loading placeholder
const ComponentPlaceholder = () => (
  <div style={{ minHeight: 200, display: 'flex', alignItems: 'center', justifyContent: 'center' }}>
    <LoadingSpinner />
  </div>
);

function UnifiedAppContentOptimized() {
  const { t } = useTranslation();
  const [selectedVenue, setSelectedVenue] = useState<UnifiedVenue | null>(null);
  const [selectedGame, setSelectedGame] = useState<MLBGame | MiLBGame | NFLGame | null>(null);
  const [gameDateTime, setGameDateTime] = useState<Date | null>(null);
  const [stadiumGames, setStadiumGames] = useState<(MLBGame | MiLBGame | NFLGame)[]>([]);
  const [sunPosition, setSunPosition] = useState<any>(null);
  const [weatherForecast, setWeatherForecast] = useState<WeatherForecast | null>(null);
  const [loadingWeather, setLoadingWeather] = useState(false);
  const [detailedSections, setDetailedSections] = useState<any[]>([]);
  const [shadedSections, setShadedSections] = useState<ShadedVenueSection[]>([]);
  const [filteredSections, setFilteredSections] = useState<any[]>([]);
  const [gameExposureData, setGameExposureData] = useState<Map<string, number> | null>(null);
  const [filterCriteria, setFilterCriteria] = useState<SunFilterCriteria>({});
  const [loadingSections, setLoadingSections] = useState(false);
  const [calculationInProgress, setCalculationInProgress] = useState(false);
  const [activeTab, setActiveTab] = useState<'tracker' | 'itinerary'>('tracker');
  const [changingVenue, setChangingVenue] = useState(false);
  const { showError } = useError();

  // Check if mobile
  const [isMobile, setIsMobile] = useState(false);
  useEffect(() => {
    const checkMobile = () => {
      setIsMobile(window.innerWidth < 768);
    };
    checkMobile();
    window.addEventListener('resize', checkMobile);
    return () => window.removeEventListener('resize', checkMobile);
  }, []);

  // Convert unified venue to legacy stadium format for compatibility
  const legacyStadium = selectedVenue ? convertToLegacyStadium(selectedVenue) : null;

  // Load venue from URL parameters on mount
  useEffect(() => {
    if (typeof window === 'undefined') return;
    
    const urlParams = new URLSearchParams(window.location.search);
    const venueParam = urlParams.get('venue');
    const stadiumParam = urlParams.get('stadium');
    const datetimeParam = urlParams.get('datetime');
    
    // Check for venue parameter
    if (venueParam || stadiumParam) {
      const venueId = venueParam || stadiumParam;
      const venue = ALL_UNIFIED_VENUES.find(v => v.id === venueId);
      if (venue) {
        setSelectedVenue(venue);
      }
    }
    
    // If datetime is provided, set it
    if (datetimeParam) {
      try {
        const dateTime = new Date(datetimeParam);
        if (!isNaN(dateTime.getTime())) {
          setGameDateTime(dateTime);
        }
      } catch (error) {
        console.error('Invalid datetime parameter:', error);
      }
    }
  }, []);

  // Load weather forecast (simplified)
  const loadWeatherForecast = useCallback(async () => {
    if (!selectedVenue || !gameDateTime) return;
    
    setLoadingWeather(true);
    try {
      const forecast = await weatherApi.getForecast(
        selectedVenue.latitude,
        selectedVenue.longitude
      );
      setWeatherForecast(forecast);
    } catch (error) {
      console.error('Failed to load weather forecast:', error);
    } finally {
      setLoadingWeather(false);
    }
  }, [selectedVenue, gameDateTime]);

  // Load weather when venue or time changes
  useEffect(() => {
    if (selectedVenue && gameDateTime) {
      loadWeatherForecast();
    }
  }, [selectedVenue, gameDateTime, loadWeatherForecast]);

  // Handle venue selection
  const handleVenueSelect = useCallback((venue: UnifiedVenue | null) => {
    if (!venue) return;
    setChangingVenue(true);
    setSelectedVenue(venue);
    setSelectedGame(null);
    setShadedSections([]);
    setFilteredSections([]);
    trackStadiumSelection(venue.name);
    
    // Reset changing state after animation
    setTimeout(() => setChangingVenue(false), 300);
  }, []);

  // Handle game selection
  const handleGameSelect = useCallback((game: MLBGame | MiLBGame | NFLGame | null, dateTime: Date | null) => {
    setSelectedGame(game);
    setGameDateTime(dateTime);
    if (game && selectedVenue) {
      trackGameSelection(selectedVenue.name, game.gameDate);
    }
  }, [selectedVenue]);

  // Calculate shade when venue and time are set
  useEffect(() => {
    const calculateShade = async () => {
      if (!selectedVenue || !gameDateTime) return;
      
      setLoadingSections(true);
      setCalculationInProgress(true);
      
      try {
        // Get sections for the venue
        let sections: VenueSection[];
        if (selectedVenue.league === 'MLB') {
          // For MLB, use stadium sections and add venueType
          const stadiumSections = getStadiumSections(selectedVenue.id);
          sections = stadiumSections.map(s => ({
            ...s,
            venueType: 'baseball',
            price: s.price || 'moderate'
          }));
        } else {
          // For other sports, use generated sections
          sections = getVenueSections(selectedVenue.id);
        }
        
        // Calculate shade
        const shadeResults = getUnifiedVenueShade(
          selectedVenue,
          gameDateTime,
          sections,
          weatherForecast?.current || undefined
        );
        
        setShadedSections(shadeResults);
        
        // Get sun position for the explanation
        const sunPos = getSunPosition(
          gameDateTime,
          selectedVenue.latitude,
          selectedVenue.longitude
        );
        setSunPosition(sunPos);
        
        // Convert to legacy format for compatibility
        const legacySections: any[] = shadeResults.map(result => ({
          id: result.section.id,
          name: result.section.name,
          level: result.section.level,
          shadePercentage: result.shadePercentage,
          sunExposure: result.isFullyShaded ? 'Shaded' : result.isPartiallyShaded ? 'Partial Sun' : 'Full Sun',
          covered: result.section.covered,
          price: result.section.price,
          section: result.section,
          inSun: !result.isFullyShaded
        }));
        
        setDetailedSections(legacySections);
        setFilteredSections(legacySections);
      } catch (error) {
        console.error('Failed to calculate shade:', error);
        showError('Failed to calculate shade data');
      } finally {
        setLoadingSections(false);
        setCalculationInProgress(false);
      }
    };
    
    calculateShade();
  }, [selectedVenue, gameDateTime, weatherForecast, showError]);

  // Render mobile app if on mobile
  if (isMobile) {
    return (
      <Suspense fallback={<LoadingSpinner />}>
        <MobileApp />
      </Suspense>
    );
  }

  return (
    <>
      <SEOHelmet 
        stadium={legacyStadium} 
        game={selectedGame} 
        pageType={selectedVenue ? 'stadium' : 'home'}
        shadedSectionsCount={shadedSections.length}
      />
      
      <div className="App">
        <Navigation activeTab={activeTab} onTabChange={setActiveTab} />
        
        <OfflineIndicator />
        
        <div className="App-header">
          <div className="header-content">
            <div className="header-left">
              <h1>{t('app.title')}</h1>
              <p>{t('app.subtitle')}</p>
              {selectedVenue && gameDateTime && (
                <div className="quick-summary">
                  <StadiumIcon />
                  <span className="stadium-name">{selectedVenue.name}</span>
                  <span className="game-time">
                    {formatDateTimeWithTimezone(gameDateTime, selectedVenue.timezone || 'America/New_York')}
                  </span>
                </div>
              )}
            </div>
            <div className="header-right">
              {selectedVenue && gameDateTime && (
                <ShareButton
                  selectedStadium={legacyStadium}
                  selectedGame={selectedGame}
                  gameDateTime={gameDateTime}
                  className="header-share-btn"
                />
              )}
            </div>
          </div>
        </div>

        <main className="App-main">
          
          <div className="controls">
            <UnifiedGameSelector
              selectedVenue={selectedVenue}
              onVenueChange={handleVenueSelect}
              onGameSelect={handleGameSelect}
            />
          </div>

          {changingVenue ? (
            <VenueChangeSkeleton />
          ) : selectedVenue && gameDateTime ? (
            <div className="results">
              {loadingWeather ? (
                <ComponentPlaceholder />
              ) : weatherForecast && (
                <Suspense fallback={<ComponentPlaceholder />}>
                  <WeatherDisplay
                    forecast={weatherForecast}
                    sunPosition={sunPosition}
                    gameDateTime={gameDateTime}
                    timezone={selectedVenue.timezone || 'America/New_York'}
                  />
                </Suspense>
              )}
              
              <div className="filter-and-sections-container">
                <Suspense fallback={<ComponentPlaceholder />}>
                  <SunExposureFilterFixed
                    onFilterChange={(criteria) => {
                      setFilterCriteria(criteria);
                      trackFilterUsage(criteria);
                    }}
                    totalSections={detailedSections.length}
                    filteredSections={filteredSections.length}
                    weatherForecast={weatherForecast}
                  />
                </Suspense>
                
                {loadingSections || calculationInProgress ? (
                  <ComponentPlaceholder />
                ) : shadedSections.length > 0 ? (
                  <Suspense fallback={<ComponentPlaceholder />}>
                    <SectionList
                      sections={filteredSections}
                      stadium={legacyStadium}
                      gameExposureData={gameExposureData}
                      isLoading={loadingSections}
                      selectedGame={selectedGame}
                    />
                  </Suspense>
                ) : (
                  <EmptyState
                    type="no-data"
                    message={t('empty.selectDateTime')}
                  />
                )}
              </div>
              
              {sunPosition && (
                <Suspense fallback={<ComponentPlaceholder />}>
                  <SunExposureExplanation
                    sunPosition={sunPosition}
                    stadiumOrientation={selectedVenue.fieldOrientation || 0}
                    gameTime={gameDateTime}
                    timezone={selectedVenue.timezone || 'America/New_York'}
                  />
                </Suspense>
              )}
            </div>
          ) : (
            <EmptyState
              type="no-stadium"
              message={t('empty.selectStadium')}
            />
          )}
        </main>
      </div>
    </>
  );
}

export default function UnifiedAppOptimized() {
  return (
    <ErrorBoundary>
      <HelmetProvider>
        <ErrorProvider>
          <I18nProvider>
            <UnifiedAppContentOptimized />
          </I18nProvider>
        </ErrorProvider>
      </HelmetProvider>
    </ErrorBoundary>
  );
}